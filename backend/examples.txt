-------------------------------------------------------------------- BASIC EXAMPLE 1------------------------------------------------
logsource:
   product: windows
   service: application
detection:
   selection:
       EventID: 524
   condition: selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 1------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event type section
safe_selection not matches {eventid: 524};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 2------------------------------------------------
logsource:
   product: windows
   service: application
detection:
   selection:
       EventID: 524
       Provider_Name: Microsoft-Windows-Backup
   condition: selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 2------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event type section
safe_selection not matches {eventid: 524, provider_name: 'Microsoft-Windows-Backup'};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 3------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection:
       EventID: 524
       Provider_Name: Microsoft-Windows-Backup
       EventName: some_text
   condition: selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 3------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event type section
safe_selection not matches {eventid: 524, provider_name: 'Microsoft-Windows-Backup', eventname: 'some_text'};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 4------------------------------------------------

logsource:
   product: windows
   service: security
detection: 
   selection:
       EventID:
           - 4728
           - 4729
           - 4730
   condition: selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 4------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event type section
safe_selection not matches {eventid: 4728 | 4729 | 4730};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 5------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection:
       EventID:
           - 4728
           - 4729
           - 4730
       Provider_Name: Microsoft-Windows-Backup
   condition: selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 5------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection not matches {eventid: 4728 | 4729 | 4730, provider_name: 'Microsoft-Windows-Backup'};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 6------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection:
       EventID:
           - 4728
           - 4729
           - 4730
       Provider_Name: Microsoft-Windows-Backup
   condition: not selection

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 6------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection matches {eventid: 524, provider_name: 'Microsoft-Windows-Backup'};

// proprty section
Main = logsource >> Monitor;
Monitor = safe_selection*;

-------------------------------------------------------------------- BASIC EXAMPLE 7------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection_1:
       EventID: 4663
   selection_2:
       ObjectName: '\Device\CdRom0\setup.exe'
 condition: selection_1 and selection_2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 7------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection_1 not matches {eventid: 4663};
safe_selection_2 not matches {objectname: '\Device\CdRom0\setup.exe'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ safe_selection_2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 8------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection_1:
       EventID: 4663
       Provider_Name: Microsoft-Windows-Backup
   selection_2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: selection_1 and selection_2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 8------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection_1 not matches {eventid: 4663, provider_name: 'Microsoft-Windows-Backup'};
safe_selection_2 not matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ safe_selection_2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 9------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection_1:
       EventID:
           - 4728
           - 4729
           - 4730
       Provider_Name: Microsoft-Windows-Backup
   selection_2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: selection_1 or selection_2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 9------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection_1 not matches {eventid: 4728 | 4729 | 4730, provider_name: 'Microsoft-Windows-Backup'};
safe_selection_2 not matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ safe_selection_2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 10------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection_1:
       EventID:
           - 4728
           - 4729
           - 4730
       Provider_Name: Microsoft-Windows-Backup
       ObjectCategory: 'Create'
       OptionalFields:
           - 'TargetObject'
           - 'ProcessId'
   selection_2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: not selection_1 or selection_2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 10------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection_1 matches {eventid: 4728 | 4729 | 4730, provider_name: 'Microsoft-Windows-Backup', objectcategory: 'Create', objectfields: 'TargetObject' | 'ProcessId'};
safe_selection_2 not matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ safe_selection_2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 11------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection_1:
       EventID:
           - 4728
           - 4729
       Provider_Name: Microsoft-Windows-Backup
       ObjectNumber|gte: 25
   selection_2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: selection_1 or not selection_2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 11------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection_1 not matches {eventid: 4728 | 4729 , provider_name: 'Microsoft-Windows-Backup', objectnumber: x1} with x1 >= 25;
safe_selection_2 matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ safe_selection_2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 12------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
       Provider_Name: Microsoft-Windows-Backup
       ObjectNumber|lte: 100
   selection2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: not selection1 and not selection2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 12------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 matches {eventid: 4663, provider_name: 'Microsoft-Windows-Backup', objectnumber: x1} with x1 <= 100;
safe_selection2 matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 \/ safe_selection2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 13------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection:
       EventID: 4663
       ObjectNumber|lte: 100
       ObjectValue|lt:23;
   filter:
       FieldName: 'ProcessName'
       FieldValue|gt: 1000;
 condition: not (selection and filter) 
 # a simplification required for this condition, so this becomes 'not selection or not filter' according to De Morgan's laws

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 13------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection matches {eventid: 4663, objectnumber: x1, objectvalue: x2} with x1 <= 100 && x2 < 23;
safe_filter matches {fieldname: 'ProcessName', fieldvalue: x1} with x1 > 1000;

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection /\ safe_filter)*;

-------------------------------------------------------------------- BASIC EXAMPLE 14------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       EventName: 'ProcessName'
   filter:
       FieldName: 'something'       
 condition: selection1 and selection2 and filter

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 14------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_filter not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 \/ safe_selection2 \/ safe_filter)*;

-------------------------------------------------------------------- EXAMPLE 15------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       EventName: 'ProcessName'
   selection3:
       FieldName: 'something'       
 condition: selection1 and (selection2 and selection3)

-------------------------------------------------------------RML TRANSLATION FOR EXAMPLE 15------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_selection3 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ Selection2)*;
Selection2 = (safe_selection2 \/ safe_selection3);

-------------------------------------------------------------------- BASIC EXAMPLE 16------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       EventName: 'ProcessName'
   selection3:
       FieldName: 'something'       
 condition: selection1 and (selection2 or selection3)

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 16------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_selection3 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ Selection2)*;
Selection2 = (safe_selection2 /\ safe_selection3);

-------------------------------------------------------------------- BASIC EXAMPLE 17------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   filter1:
       EventName: 'ProcessName'
   filter2:
       FieldName: 'something'       
 condition: selection1 or (filter1 and filter2)

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 17------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_filter1 not matches {eventname: 'ProcessName'};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ Filter1)*;
Filter1 = (safe_filter1 \/ safe_filter2);

-------------------------------------------------------------------- BASIC EXAMPLE 18------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   filter1:
       EventName: 'ProcessName'
   filter2:
       FieldName: 'something'       
 condition: selection1 or not (filter1 and filter2)
  # a simplification required for this condition, so this becomes 'selection1 or not filter1 or not filter2' according to De Morgan's laws

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 18------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_filter1 matches {eventname: 'ProcessName'};
safe_filter2 matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 /\ safe_filter1 /\ safe_filter2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 19------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   filter1:
       EventName: 'ProcessName'
   filter2:
       FieldName: 'something'       
 condition: not selection1 or (filter1 and filter2)

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 19------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 matches {eventid: 4663};
safe_filter1 not matches {eventname: 'ProcessName'};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ Filter1)*;
Filter1 = (safe_filter1 \/ safe_filter2);

-------------------------------------------------------------------- BASIC EXAMPLE 20------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   filter1:
       EventName: 'ProcessName'
   filter2:
       FieldName: 'something'       
 condition: not selection1 or (not filter1 and filter2)


-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 20------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 matches {eventid: 4663};
safe_filter1 matches {eventname: 'ProcessName'};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 /\ Filter1)*;
Filter1 = (safe_filter1 \/ safe_filter2);

-------------------------------------------------------------------- BASIC EXAMPLE 21------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection:
       EventID: 4663
   filter1:
       EventName: 'ProcessName'
   filter2:
       FieldName: 'something'       
 condition: not selection and not (filter1 or filter2)
  # a simplification required for this condition, so this becomes 'not selection and not filter1 and not filter2' according to De Morgan's laws

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 21------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 matches {eventid: 4663};
safe_filter1 matches {eventname: 'ProcessName'};
safe_filter2 matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ safe_filter1 \/ safe_filter2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 22------------------------------------------------

detection:
  selection:
    Image: "werfault.exe"
  filter1:
    ParentImage: "svchost.exe"
  filter2:
    DestinationIp:
      - "10.0.0.0"
      - "172.16.0.0"
      - "192.168.0.0"
  filter3:
    DestinationHostname:
      - "windowsupdate.com"
      - "microsoft.com"
  condition: selection and not ( filter1 or filter2 or filter3 )

# a simplification required for this condition, so this becomes 'selection and not filter1 and not filter2 and not filter3' according to De Morgan's laws

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 22------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'edr'};

// event types
safe_selection matches {image: 'werfault.exe'};
safe_filter1 matches {parentimage: 'svchost.exe'};
safe_filter2 matches {destinationip: '10.0.0.0'|'172.16.0.0'|'192.168.0.0'};
safe_filter3 matches {destinationhostname: 'windowsupdate.com'|'microsoft.com'};

// proprty section
Main = logsource >> Monitor!;
Monitor = (safe_selection \/ safe_filter1 \/ safe_filter2 \/ safe_filter3)*;

-------------------------------------------------------------------- BASIC EXAMPLE 23------------------------------------------------

detection:
  selection:
    Image: "werfault.exe"
  filter1:
    ParentImage: "svchost.exe"
  filter2:
    DestinationIp:
      - "10.0.0.0"
      - "172.16.0.0"
      - "192.168.0.0"
  filter3:
    DestinationHostname:
      - "windowsupdate.com"
      - "microsoft.com"
  condition: selection and not (filter1 or (filter2 and filter3))

  # a simplification required for this condition, so this becomes 'selection and not filter1 and (not filter2 or not filter3)' according to De Morgan's laws


-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 23------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'edr'};

// event types
safe_selection not matches {image: 'werfault.exe'};
safe_filter1 matches {parentimage: 'svchost.exe'};
safe_filter2 matches {destinationip: '10.0.0.0'|'172.16.0.0'|'192.168.0.0'};
safe_filter3 matches {destinationhostname: 'windowsupdate.com'|'microsoft.com'};

// proprty section
Main = logsource >> Monitor!;
Monitor = (safe_selection \/ safe_filter1 \/ Filter2)*;
Filter2 = (safe_filter2 /\ safe_filter3);

-------------------------------------------------------------------- BASIC EXAMPLE 24------------------------------------------------

detection:
  selection:
    Image: "werfault.exe"
  filter1:
    ParentImage: "svchost.exe"
  filter2:
    DestinationIp:
      - "10.0.0.0"
      - "172.16.0.0"
      - "192.168.0.0"
  filter3:
    DestinationHostname:
      - "windowsupdate.com"
      - "microsoft.com"
  condition: selection and not (filter1 or not (filter2 and filter3))

  # a simplification required for this condition, so this becomes 'selection and not filter1 and filter2 and filter3' according to De Morgan's laws


-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 24------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'edr'};

// event types
safe_selection not matches {image: 'werfault.exe'};
safe_filter1 matches {parentimage: 'svchost.exe'};
safe_filter2 not matches {destinationip: '10.0.0.0'|'172.16.0.0'|'192.168.0.0'};
safe_filter3 not matches {destinationhostname: 'windowsupdate.com'|'microsoft.com'};

// proprty section
Main = logsource >> Monitor!;
Monitor = (safe_selection \/ safe_filter1 \/ safe_filter2 \/ safe_filter3)*;

-------------------------------------------------------------------- BASIC EXAMPLE 25------------------------------------------------

detection:
  selection:
    Image: "werfault.exe"
  filter1:
    ParentImage: "svchost.exe"
  filter2:
    DestinationIp:
      - "10.0.0.0"
      - "172.16.0.0"
      - "192.168.0.0"
  filter3:
    DestinationHostname:
      - "windowsupdate.com"
      - "microsoft.com"
  condition: selection and (filter1 or (filter2 and filter3))


-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 25------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'edr'};

// event types
safe_selection not matches {image: 'werfault.exe'};
safe_filter1 not matches {parentimage: 'svchost.exe'};
safe_filter2 not matches {destinationip: '10.0.0.0'|'172.16.0.0'|'192.168.0.0'};
safe_filter3 not matches {destinationhostname: 'windowsupdate.com'|'microsoft.com'};

// proprty section
Main = logsource >> Monitor!;
Monitor = (safe_selection \/ Filter1)*;
Filter1 = (safe_filter2 /\ Filter2);
Filter2 = (safe_filter2 \/ safe_filter3);

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

-------------------------------------------------------------------- BASIC EXAMPLE 26------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
       Provider_Name: Microsoft-Windows-Backup
       ObjectNumber|lte: 100
   selection2:
       ObjectName: '\Device\CdRom0\setup.exe'
       FieldName: 'ProcessName'
 condition: all of selection*
 # this condition should be simplified into 'selection1 and selection2'

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 26------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663, provider_name: 'Microsoft-Windows-Backup', objectnumber: x1} with x1 <= 100;
safe_selection2 not matches {objectname: '\Device\CdRom0\setup.exe', fieldname: 'ProcessName'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 \/ safe_selection2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 27------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
       ObjectNumber|lte: 100
       ObjectValue|lt:23;
   selection2:
       FieldName: 'ProcessName'
       FieldValue|gt: 1000;
 condition: 1 of selection*
 # this condition should be simplified into 'selection1 or selection2'

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 27------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663, objectnumber: x1, objectvalue: x2} with x1 <= 100 && x2 < 23;
safe_selection2 not matches {fieldname: 'ProcessName', fieldvalue: x1} with x1 > 1000;

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection /\ safe_selection2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 28------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
       ObjectNumber|lte: 100
       ObjectValue|lt:23;
   selection2:
       FieldName: 'ProcessName'
       FieldValue|gt: 1000;
 condition: any of selection*
 # this condition should be simplified into 'selection1 or selection2'

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 28------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663, objectnumber: x1, objectvalue: x2} with x1 <= 100 && x2 < 23;
safe_selection2 not matches {fieldname: 'ProcessName', fieldvalue: x1} with x1 > 1000;

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection /\ safe_selection2)*;

-------------------------------------------------------------------- EXAMPLE 29------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       EventName: 'ProcessName'
   selection3:
       FieldName: 'something'       
 condition: all of selection*
 # this condition should be simplified into 'selection1 and selection2 and selection3'

-------------------------------------------------------------RML TRANSLATION FOR EXAMPLE 29------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_selection3 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection_1 \/ safe_selection2 \/ safe_selection3)*;

-------------------------------------------------------------------- BASIC EXAMPLE 30------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: all of selection* and all of filter*
 # can be simplified selection1 and selection2 and filter1 and filter2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 30------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 \/ safe_selection2 \/ safe_filter1 \/ safe_filter2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 31------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: 1 of selection* or 1 of filter*
 # can be simplified selection1 or selection2 or filter1 or filter2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 31------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection3 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (safe_selection1 /\ safe_selection2 /\ safe_filter1 /\ safe_filter2)*;

-------------------------------------------------------------------- BASIC EXAMPLE 31------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: all of selection* or all of filter*
 # can be simplified (selection1 and selection2) or (filter1 and filter2)

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 31------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (Selection1 /\ Filter1)*;
Selection1 = (safe_selection1 \/ safe_selection2);
Filter1 = (safe_filter1 \/ safe_filter2);

-------------------------------------------------------------------- BASIC EXAMPLE 32------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: 1 of selection* and 1 of filter*
 # can be simplified (selection1 or selection2) and (filter1 or filter2)

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 32------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection3 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (Selection1 \/ Filter1)*;
Selection1 = (safe_selection1 /\ safe_selection2);
Filter1 = (safe_filter1 /\ safe_filter2);

-------------------------------------------------------------------- BASIC EXAMPLE 33------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: all of selection* or 1 of filter*
 # can be simplified (selection1 and selection2) or filter1 or filter2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 33------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection2 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (Selection1 /\ safe_filter1 /\ safe_filter2)*;
Selection1 = (safe_selection1 \/ safe_selection2);

-------------------------------------------------------------------- BASIC EXAMPLE 34------------------------------------------------

logsource:
   product: windows
   service: application
detection:
   selection1:
       EventID: 4663
   selection2:
       FieldName: 'ProcessName'       
   filter1:
       FieldID: 1818
   filter2:
       FieldName: 'something'       
 condition: 1 of selection* and all of filter*
 # can be simplified (selection1 or selection2) and filter1 and filter2

-------------------------------------------------------------RML TRANSLATION FOR BASIC EXAMPLE 34------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'application'};

// event types
safe_selection1 not matches {eventid: 4663};
safe_selection3 not matches {eventname: 'ProcessName'};
safe_filter1 not matches {fieldid: 1818};
safe_filter2 not matches {fieldname: 'something'};

// proprty section
Main = logsource >> Monitor;
Monitor = (Selection1 \/ safe_filter1 \/ safe_filter2)*;
Selection1 = (safe_selection1 /\ safe_selection2);

--------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------TEMPORAL EXAMPES-----------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------- TEMPORAL EXAMPLE 1------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection_task:
        EventID: 4698
    selection_firewall:
        EventID: 4946
    timeframe: 5m       # timeframe proves its temporal property. 
    condition: selection_task and selection_firewall    # with the appearence of 'timeframe', this condition became temporal condition.

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 1------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection_task(ts) matches {timestamp: ts, eventid: 4698};
timed_selection_firewall(ts) matches {timestamp: ts, eventid: 4946};
timed_other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0, 0>!;
Monitor<start_ts, s1, s2> = 
{
    let ts; timed_selection_task(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 1, 0>
        else (
            if (s2 == 1) empty else Monitor<start_ts, 1, s2>
        )
    )
}
\/
{
    let ts; timed_selection_firewall(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 1>
        else (
            if (s1 == 1) empty else Monitor<start_ts, s1, 1>                    
        )
    )
}
\/
{
    let ts; timed_other_events(ts) (
        if (start_ts > 0 && ts - start_ts > 300000)
            Monitor<0, 0, 0>            
        else (
            Monitor<start_ts, s1, s2>
        )
    )
};

-------------------------------------------------------------------- TEMPORAL EXAMPLE 2------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection_task:
        EventID: 4698
    selection_firewall:
        EventID: 4946
    condition: selection_task | near selection_firewall
    # near can be simplified into 'selection_task and selection_firewall'
    # also add timeframe(10s) in this case if its missing. near has default timeframe which is 10s

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 2------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection_task(ts) matches {timestamp: ts, eventid: 4698};
timed_selection_firewall(ts) matches {timestamp: ts, eventid: 4946};
other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0, 0>!;
Monitor<start_ts, s1, s2> = 
{
    let ts; timed_selection_task(ts) (
        if (start_ts == 0 || ts - start_ts > 10000)
            Monitor<ts, 1, 0>
        else (
            if (s2 == 1) empty else Monitor<start_ts, 1, s2>
        )
    )
}
\/
{
    let ts; timed_selection_firewall(ts) (
        if (start_ts == 0 || ts - start_ts > 10000)
            Monitor<ts, 0, 1>
        else (
            if (s1 == 1) empty else Monitor<start_ts, s1, 1>                    
        )
    )
}
\/
{
    let ts; timed_other_events(ts) (
        if (start_ts > 0 && ts - start_ts > 10000)
            Monitor<0, 0, 0>            
        else (
            Monitor<start_ts, s1, s2>
        )
    )
};
-------------------------------------------------------------------- TEMPORAL EXAMPLE 3------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection_task:
        EventID: 4698
    selection_firewall:
        EventID: 4946
    timeframe: 1m       # timeframe proves its temporal property.     
    condition: selection_task | near selection_firewall
    # near can be simplified into 'selection_task and selection_firewall'

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 3------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection_task(ts) matches {timestamp: ts, eventid: 4698};
timed_selection_firewall(ts) matches {timestamp: ts, eventid: 4946};
timed_other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0, 0>!;
Monitor<start_ts, s1, s2> = 
{
    let ts; timed_selection_task(ts) (
        if (start_ts == 0 || ts - start_ts > 60000)
            Monitor<ts, 1, 0>
        else (
            if (s2 == 1) empty else Monitor<start_ts, 1, s2>
        )
    )
}
\/
{
    let ts; timed_selection_firewall(ts) (
        if (start_ts == 0 || ts - start_ts > 60000)
            Monitor<ts, 0, 1>
        else (
            if (s1 == 1) empty else Monitor<start_ts, s1, 1>                    
        )
    )
}
\/
{
    let ts; timed_other_events(ts) (
        if (start_ts > 0 && ts - start_ts > 60000)
            Monitor<0, 0, 0>            
        else (
            Monitor<start_ts, s1, s2>
        )
    )
};
-------------------------------------------------------------------- TEMPORAL EXAMPLE 4------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection1:
        EventID: 4698
        Value|lte:100
    selection2:
        EventID: 4946
        Value|gte:50        
    selection3:
        EventID: 4000
        Value|gte:50        
    timeframe: 5m       # timeframe proves its temporal property. 
    condition: selection1 and selection2 and selection3

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 4------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection1(ts) matches {timestamp: ts, eventid: 4698, value: x} with x <= 100;
timed_selection2(ts) matches {timestamp: ts, eventid: 4946, value: x} with x >= 50;
timed_selection3(ts) matches {timestamp: ts, eventid: 4000, value: x} with x >= 50;
timed_other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0, 0>!;
Monitor<start_ts, s1, s2, s3> = 
{
    let ts; timed_selection1(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 1, 0, 0>
        else (
            if (s2+s3 == 2) empty else Monitor<start_ts, 1, s2, s3>
        )
    )
}
\/
{
    let ts; timed_selection2(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 1, 0>
        else (
            if (s1+s3 == 2) empty else Monitor<start_ts, s1, 1, s3>                    
        )
    )
}
\/
{
    let ts; timed_selection3(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 0, 1>
        else (
            if (s1+s2 == 2) empty else Monitor<start_ts, s1, s2, 1>                    
        )
    )
}
\/
{
    let ts; timed_other_events(ts) (
        if (start_ts > 0 && ts - start_ts > 300000)
            Monitor<0, 0, 0, 0>            
        else (
            Monitor<start_ts, s1, s2, s3>
        )
    )
};
-------------------------------------------------------------------- TEMPORAL EXAMPLE 5------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection1:
        EventID: 4698
        Value|lte:100
    selection2:
        EventID: 4946
        Value|gte:50        
    selection3:
        EventID: 4000
        Value|gte:50        
    selection4:
        EventID: 4010
        Value|lte:110  
    timeframe: 5m       # timeframe proves its temporal property. 
    condition: selection1 and selection2 and selection3

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 5------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection1(ts) matches {timestamp: ts, eventid: 4698, value: x} with x <= 100;
timed_selection2(ts) matches {timestamp: ts, eventid: 4946, value: x} with x >= 50;
timed_selection3(ts) matches {timestamp: ts, eventid: 4000, value: x} with x >= 50;
timed_selection4(ts) matches {timestamp: ts, eventid: 4010, value: x} with x <= 110;
timed_other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0, 0>!;
Monitor<start_ts, s1, s2, s3, s4> = 
{
    let ts; timed_selection1(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 1, 0, 0, 0>
        else (
            if (s2+s3+s4 == 3) empty else Monitor<start_ts, 1, s2, s3, s4>
        )
    )
}
\/
{
    let ts; timed_selection2(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 1, 0, 0>
        else (
            if (s1+s3+s4 == 2) empty else Monitor<start_ts, s1, 1, s3, s4>                    
        )
    )
}
\/
{
    let ts; timed_selection3(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 0, 1, 0>
        else (
            if (s1+s2+s4 == 3) empty else Monitor<start_ts, s1, s2, 1, s4>                    
        )
    )
}
\/
{
    let ts; timed_selection4(ts) (
        if (start_ts == 0 || ts - start_ts > 300000)
            Monitor<ts, 0, 0, 0, 1>
        else (
            if (s1+s2+s3 == 3) empty else Monitor<start_ts, s1, s2, s3, 1>                    
        )
    )
}
\/
{
    let ts; other_events(ts) (
        if (start_ts > 0 && ts - start_ts > 300000)
            Monitor<0, 0, 0, 0, 0>            
        else (
            Monitor<start_ts, s1, s2, s3, s3>
        )
    )
};
-------------------------------------------------------------------- TEMPORAL EXAMPLE 6------------------------------------------------

logsource:
    product: windows
    service: security
detection:
    selection:
        EventID: 4663  # An attempt was made to access an object.
        Accesses: 'DELETE'
    condition: selection | count() > 5
    # count is temporal property, default timeframe is 10s

-------------------------------------------------------------RML TRANSLATION FOR TEMPORAL EXAMPLE 6------------------------------------

// log source filter
logsource matches {product: 'windows', service: 'security'};

// event types
timed_selection(ts) matches {timestamp: ts, eventid: 4663, accesses: 'DELETE'};
safe_selection not matches {eventid: 4663, accesses: 'DELETE'};
timed_other_events(ts) matches {timestamp: ts};

// proprty section
Main = logsource >> Monitor<0, 0>!;
Monitor<start_ts, count> =
    {let ts; timed_selection(ts)
        (
            if (start_ts == 0 || ts - start_ts > 10000) (
                Monitor<ts, 1>
            )                
            else if (count+1 > 4) safe_selection else Monitor<start_ts,count+1>
        )
    }
    \/
    {let ts; timed_other_events(ts)
        (
            if (start_ts > 0 && ts - start_ts > 10000)
                Monitor<0, 0> 
            else
                Monitor<count, start_ts>
        )
    };



# THIS CAN BE USED TO TEST TRANSLATION. WE NEED TO VERIFY RESULTS OF TRANSLATION IN TEST BE TEXT COMPARISON BETWEEN GENERATED VS EXPECTED RML PROPERTIES
# There can be minor mistakes in naming of translation. please verify those before.
# All condition might need simplification before translation.
# any 'not' in condition come before '()' needs to be simplified according to de morgans law.
# after removel again simplify condition to remove as many paranthesis as possible. for 
#    eg:- and (a and b) doesnt need this paranthesis.
#           (a and b) and (c and d) also doesnt need this paranthesis.
# after this process, if paranthesis still exists, then it should be translated. 
# examples given in the above covers most of the usecases
# consider there are many possible usecases which can be labeled as unsupported.
# Make the transpiler as generic as possible.
# please check the examples given to undersntand how generic it can be

